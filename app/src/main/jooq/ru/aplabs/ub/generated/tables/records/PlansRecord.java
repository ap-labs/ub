/*
 * This file is generated by jOOQ.
 */
package ru.aplabs.ub.generated.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.aplabs.ub.generated.tables.Plans;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:1.001"
    },
    date = "2020-06-25T20:59:58.557Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlansRecord extends UpdatableRecordImpl<PlansRecord> implements Record4<String, String, Long, Boolean> {

    private static final long serialVersionUID = -2004355971;

    /**
     * Setter for <code>plans.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>plans.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>plans.description</code>.
     */
    public void setDescription(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>plans.description</code>.
     */
    public String getDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>plans.price</code>.
     */
    public void setPrice(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>plans.price</code>.
     */
    public Long getPrice() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>plans.active</code>.
     */
    public void setActive(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>plans.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Long, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Long, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Plans.PLANS.ID;
    }

    @Override
    public Field<String> field2() {
        return Plans.PLANS.DESCRIPTION;
    }

    @Override
    public Field<Long> field3() {
        return Plans.PLANS.PRICE;
    }

    @Override
    public Field<Boolean> field4() {
        return Plans.PLANS.ACTIVE;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDescription();
    }

    @Override
    public Long component3() {
        return getPrice();
    }

    @Override
    public Boolean component4() {
        return getActive();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDescription();
    }

    @Override
    public Long value3() {
        return getPrice();
    }

    @Override
    public Boolean value4() {
        return getActive();
    }

    @Override
    public PlansRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public PlansRecord value2(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PlansRecord value3(Long value) {
        setPrice(value);
        return this;
    }

    @Override
    public PlansRecord value4(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public PlansRecord values(String value1, String value2, Long value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlansRecord
     */
    public PlansRecord() {
        super(Plans.PLANS);
    }

    /**
     * Create a detached, initialised PlansRecord
     */
    public PlansRecord(String id, String description, Long price, Boolean active) {
        super(Plans.PLANS);

        set(0, id);
        set(1, description);
        set(2, price);
        set(3, active);
    }
}
